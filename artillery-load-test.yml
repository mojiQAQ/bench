config:
  target: 'http://localhost:8080'
  processor: './artillery-processor.js'
  phases:
    # 预热阶段
    - duration: 30
      arrivalRate: 5
      name: "预热阶段"
    # 正常负载
    - duration: 120
      arrivalRate: 20
      name: "正常负载"
    # 高负载
    - duration: 120
      arrivalRate: 50
      name: "高负载"
    # 峰值负载
    - duration: 60
      arrivalRate: 100
      name: "峰值负载"
    # 降低负载
    - duration: 60
      arrivalRate: 20
      name: "降低负载"
    # 冷却阶段
    - duration: 30
      arrivalRate: 2
      name: "冷却阶段"
      
  # 性能阈值设置
  ensure:
    p99: 1000    # 99% 请求在1秒内完成
    p95: 500     # 95% 请求在500ms内完成
    p50: 200     # 50% 请求在200ms内完成
    maxErrorRate: 1  # 错误率不超过1%

scenarios:
  # 传感器数据上报（包含负载数据）
  - name: "传感器数据上报"
    weight: 40
    flow:
      - function: "generateSensorData"
      - post:
          url: "/api/sensor-data"
          headers:
            Content-Type: "application/json"
          json:
            timestamp: "{{ sensorData.timestamp }}"
            device_id: "{{ sensorData.device_id }}"
            metric_name: "{{ sensorData.metric_name }}"
            value: "{{ sensorData.value }}"
            priority: "{{ sensorData.priority }}"
            data: "{{ sensorData.data }}"
          afterResponse: "validateSensorDataResponse"

  # 传感器读写操作（包含负载数据）
  - name: "传感器读写操作"
    weight: 35
    flow:
      - function: "generateSensorRWData"
      - post:
          url: "/api/sensor-rw"
          headers:
            Content-Type: "application/json"
          json:
            device_id: "{{ sensorRWData.device_id }}"
            metric_name: "{{ sensorRWData.metric_name }}"
            new_value: "{{ sensorRWData.new_value }}"
            timestamp: "{{ sensorRWData.timestamp }}"
            priority: "{{ sensorRWData.priority }}"
            data: "{{ sensorRWData.data }}"
          afterResponse: "validateSensorRWResponse"

  # 批量传感器读写操作（包含负载数据）
  - name: "批量传感器读写操作"
    weight: 15
    flow:
      - function: "generateBatchData"
      - post:
          url: "/api/batch-sensor-rw"
          headers:
            Content-Type: "application/json"
          json: "{{ batchData }}"
          afterResponse: "validateBatchResponse"

  # 统计查询
  - name: "统计查询"
    weight: 5
    flow:
      - get:
          url: "/api/stats"
          afterResponse: "validateStatsResponse"

  # 健康检查
  - name: "健康检查"
    weight: 5
    flow:
      - get:
          url: "/health"
          afterResponse:
            - function: "logRequest"
            - function: "trackPerformance"

# 性能监控和报告
before:
  flow:
    - log: "开始Artillery负载测试 - 支持数据负载压测"
    - log: "目标服务器: {{ $target }}"
    - log: "测试场景: 传感器数据(40%) + 读写操作(35%) + 批量操作(15%) + 查询(10%)"

after:
  flow:
    - log: "Artillery负载测试完成"
    - log: "请查看生成的报告文件获取详细结果" 